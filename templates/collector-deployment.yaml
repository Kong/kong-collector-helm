apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kong-collectorapi.fullname" . }}
  annotations: {}
  creationTimestamp: null
  labels:
    io.kompose.service: collector
spec:
  replicas: 1
  selector:
    matchLabels:
        io.kompose.service: collector
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: collector
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
      - name: wait-for-postgres
        image: "{{ .Values.waitImage.repository }}:{{ .Values.waitImage.tag }}"
        imagePullPolicy: {{ .Values.waitImage.pullPolicy }}
        env:
        - name: COLLECTOR_PG_HOST
          value: "{{ .Values.postgres.host }}"
        - name: COLLECTOR_PG_PORT
          value: "{{ .Values.postgres.port }}"
        command: [ "/bin/sh", "-c", "until nc -zv $COLLECTOR_PG_HOST $COLLECTOR_PG_PORT -w1; do echo 'waiting for db'; sleep 1; done" ]
      containers:
      - args:
        - bash
        - -c
        - flask db upgrade && /collector/run-collector.sh
        env:
        - name: CELERY_BROKER_URL
          value: "redis://:{{ .Values.redis.password }}@{{ .Values.redis.host }}:{{ .Values.redis.port }}/0"
        - name: COLLECTOR_DISCARD
          value: "True"
        - name: FLASK_APP
          value: /collector
        - name: KONG_HOST
          value: {{ .Values.kong.host }}
        - name: KONG_PORT
          value: "{{ .Values.kong.port }}"
        - name: SQLALCHEMY_DATABASE_URI
          value: "postgres://{{ .Values.postgres.username }}:{{ .Values.postgres.password }}@{{ .Values.postgres.host }}:{{ .Values.postgres.port }}/collector"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        name: collector
        ports:
        - containerPort: 5000
        resources: {}
      restartPolicy: Always
status: {}
