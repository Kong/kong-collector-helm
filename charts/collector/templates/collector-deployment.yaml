apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "collector.fullname" . }}
  annotations: {}
  creationTimestamp: null
  labels:
    {{- include "collector.metaLabels" . | nindent 4 }}
    app.kubernetes.io/component: app
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "collector.metaLabels" . | nindent 6 }}
      app.kubernetes.io/component: app
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        {{- include "collector.metaLabels" . | nindent 8 }}
        app.kubernetes.io/component: app
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      initContainers:
      {{- include "collector.wait-for-db" . | nindent 6 }}
      {{- include "collector.wait-for-redis" . | nindent 6 }}
      {{- include "collector.wait-for-kong" . | nindent 6 }}
      containers:
      - name: collector
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        args:
        - bash
        - -c
        - flask db upgrade && /collector/run-collector.sh
        env:
        - name: CELERY_BROKER_URL
          value: "redis://:{{ .Values.redis.password }}@{{ template "kong-collectorapi.redis.fullname" . }}:{{ .Values.redis.port }}/0"
        - name: FLASK_APP
          value: /collector
        - name: KONG_PROTOCOL
          value: "{{ .Values.kongAdmin.protocol }}"
        - name: KONG_HOST
          value: "{{ .Values.kongAdmin.host }}"
        - name: KONG_PORT
          value: "{{ .Values.kongAdmin.servicePort }}"
        - name: KONG_ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
            {{- if .Values.kongAdmin.existingSecret }}
              name: {{ .Values.kongAdmin.existingSecret }}
            {{- else }}
              name: kong-admin-token-secret
            {{- end }}
              key: kong-admin-token
        - name: SQLALCHEMY_DATABASE_URI
          value: "postgres://{{ .Values.postgresql.postgresqlUsername }}:{{ .Values.postgresql.postgresqlPassword }}@{{ template "collector.postgresql.fullname" . }}:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.postgresqlDatabase }}"
        ports:
        - containerPort: {{ .Values.collector.containerPort }}
        resources: {}
      - name: celery-worker
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        args:
        - bash
        - -c
        - celery worker -l info -A collector.scheduler.celery --concurrency=1
        env:
        - name: CELERY_BROKER_URL
          value: "redis://:{{ .Values.redis.password }}@{{ template "collector.redis.fullname" . }}:{{ .Values.redis.port }}/0"
        - name: KONG_PROTOCOL
          value: "{{ .Values.kongAdmin.protocol }}"
        - name: KONG_HOST
          value: "{{ .Values.kongAdmin.host }}"
        - name: KONG_PORT
          value: "{{ .Values.kongAdmin.servicePort }}"
        - name: KONG_ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
            {{- if .Values.kongAdmin.existingSecret }}
              name: {{ .Values.kongAdmin.existingSecret }}
            {{- else }}
              name: kong-admin-token-secret
            {{- end }}
              key: kong-admin-token
        - name: SQLALCHEMY_DATABASE_URI
          value: "postgres://{{ .Values.postgresql.postgresqlUsername }}:{{ .Values.postgresql.postgresqlPassword }}@{{ template "collector.postgresql.fullname" . }}:{{ .Values.postgresql.service.port }}/{{ .Values.postgresql.postgresqlDatabase }}"
      - name: celery-beat
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        args:
        - bash
        - -c
        - celery beat -l info -A collector.scheduler.celery
        env:
        - name: CELERY_BROKER_URL
          value: "redis://:{{ .Values.redis.password }}@{{ template "collector.redis.fullname" . }}:{{ .Values.redis.port }}/0"
        resources: {}
      restartPolicy: Always
status: {}
